def projectName = 'NucleusFramework'
def majorVersion = '0'
def minorVersion = '0'
def buildBy = null
def mavenRepositories = [
        'https://github.com/JCThePants/mvn-repo/raw/master',
        'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
]
def providedDependsFiles = [
        //'C:/JavaRepo/bukkit/unmapped-spigot-1.8-R0.1-SNAPSHOT.jar',
        //'C:/JavaRepo/bukkit/Vault.jar',
        //'C:/JavaRepo/bukkit/WorldEdit.jar',
]
def providedDepends = [
        'org.spigotmc:unmapped-spigot:1.8-R0.1-SNAPSHOT',
        'com.sk89q:WorldEdit:SNAPSHOT',
        'net.milkbowl.vault:Vault:1.4.1',
        'com.google.code.findbugs:jsr305:3.0.0'
]
def compileDependsFiles = null
def compileDepends = null
def includeFiles = [
        'plugin.yml',
        'LICENSE.txt'
]
def javaVersion = 1.7

/* Begin */

// Set version number
if (hasProperty("teamcity")) {
    version = majorVersion + '.' + minorVersion + '.' + teamcity["build.number"] + '.git-' + teamcity["build.vcs.number"]

    if (buildBy == null) {
        buildBy = teamcity["build.triggeredBy.username"]

        if (!buildBy) {
            buildBy = teamcity["build.triggeredBy"]
        }

        if (!buildBy) {
            buildBy = teamcity["agent.name"]
        }
    }

}else {
    version = majorVersion + '.' + minorVersion + '.000.git-unknown'
}

if (buildBy == null) {
    buildBy = System.properties['user.name']
}

defaultTasks 'build'

apply plugin: 'java'

// Minimum Java Version
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()

    for (repo in mavenRepositories) {
        maven {
            url repo
        }
    }
}

// Add provided configuration to prevent dependencies
// from being included in the jar
configurations {
    provided
}

sourceSets {

    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided

        java {
            srcDir 'src'
        }
    }

    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

// Add dependencies
dependencies {

    if (compileDependsFiles) {
        compile files(compileDependsFiles)
    }

    if (providedDependsFiles) {
        provided files(providedDependsFiles)
    }

    if (compileDepends) {
        compile compileDepends
    }

    if (providedDepends) {
        provided providedDepends
    }
}


// Jar file output with version number
jar {

    archiveName = projectName + '.' + version + '.jar'

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    if (includeFiles) {
        from includeFiles
    }

    manifest {
        attributes("Built-By": buildBy,
                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                "Implementation-Title": projectName,
                "Implementation-Version": version)
    }

}

// Task to create a Jar file artifact with no version number
task simpleNamedJar(type: Jar) {

    archiveName = projectName + '.jar'

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    if (includeFiles) {
        from includeFiles
    }

    manifest {
        attributes("Built-By": buildBy,
                "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
                "Implementation-Title": projectName,
                "Implementation-Version": version)
    }

    with jar
}

artifacts {
    archives simpleNamedJar
}